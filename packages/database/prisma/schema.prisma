// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  accounts          Account[]
  onRampTransaction OnRampTransaction[]
  balance           Balance[]
  sentTransfers     DirectTransfer[]    @relation(name: "ToUserRelation")
  receiveTransfers  DirectTransfer[]    @relation(name: "FromUserRelation")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model DirectTransfer {
  id         Int      @id @default(autoincrement())
  amount     Int
  startTime  DateTime
  fromUser   User     @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  fromUserId String
  toUser     User     @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
  toUserId   String
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  user      User         @relation(fields: [userId], references: [id])
  userId    String
}

model Balance {
  id     String @id @default(cuid())
  amount Int    @default(0)
  locked Int    @default(0)
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum OnRampStatus {
  Success
  Failure
  Processing
}
